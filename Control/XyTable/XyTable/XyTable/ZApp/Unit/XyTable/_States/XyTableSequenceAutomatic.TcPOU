<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="XyTableSequenceAutomatic" Id="{de11c958-7b36-4afe-9993-58be33d10feb}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK XyTableSequenceAutomatic EXTENDS XyTableSequence IMPLEMENTS ZCore.ISequence
VAR
  _step : ZCore.Step(XyTableStep.AutomaticBegin, XyTableStep.AutomaticEnd);
  _segment : REFERENCE TO Segment;
  _rt : ZAux.RealTime;
  _otg : Struckig.Otg(0.001, 2);
  
  _splineLogicBuffer : ARRAY [0..200] OF DINT;
  _splinePointBuffer : ARRAY [0..200*2] OF LREAL;
  _splineTangentBuffer : ARRAY [0..200*2] OF LREAL;
  _splineSegmentBuffer : ARRAY [0..200] OF LREAL;
  _spline : ZCore.CatmullRomSpline(200, ADR(_splineLogicBuffer), ADR(_splinePointBuffer), ADR(_splineTangentBuffer), ADR(_splineSegmentBuffer), 2);
  
  _splineIndex : INT;
  i : INT;
END_VAR
VAR_OUTPUT
  ProbeX : LREAL;
  ProbeY : LREAL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT Busy THEN
  RETURN;
END_IF

IF OnStart(_step) THEN
  ; // init custom sequence variables here ...
END_IF

IF OnStop() THEN
  RETURN; // external stop was triggered
END_IF

IF OnHalt() THEN
  Halting := TRUE; // Uncomment to acknowledge that the sequence is halting
END_IF

REPEAT
  LogStep();

  CASE _step.Index OF
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
    XyTableStep.AutomaticBegin:
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
      IF _step.OnEntry()
      THEN
        _axis.AxisX.MoveInterpolatedPositionAsync(THIS^);
        _axis.AxisY.MoveInterpolatedPositionAsync(THIS^); 
      END_IF

      Await2(_axis.AxisX, _axis.AxisY, XyTableStep.AutomaticWaitSegment);
    
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
    XyTableStep.AutomaticWaitSegment:
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
      IF _step.OnEntry()
      THEN
        Milestone('Waiting for segment');
              
        _otg.CycleTime := _rt.CycleTimeInSeconds();
        _otg.ControlInterface := Struckig.ControlInterfaceType.Position;
        _otg.Discretization := Struckig.DiscretizationType.Discrete;
        _otg.EnableAutoPropagate := TRUE;  
        _otg.Synchronization := Struckig.SynchronizationType.Phase;        
        _otg.MaxJerk[0] := 100000;
        _otg.MaxJerk[1] := 100000;         
        _otg.MaxAcceleration[0] := 10000;
        _otg.MaxAcceleration[1] := 10000; 
        _otg.MaxVelocity[0] := _data.Machine.Highspeed;
        _otg.MaxVelocity[1] := _data.Machine.Highspeed;
        
        _otg.CurrentPosition[0] := _axis.AxisX.ActualPosition;
        _otg.CurrentPosition[1] := _axis.AxisY.ActualPosition;
        _otg.CurrentVelocity[0] := 0;
        _otg.CurrentVelocity[1] := 0;
        _otg.CurrentAcceleration[0] := 0;
        _otg.CurrentAcceleration[1] := 0;
        _otg.TargetPosition[0] := 0; 
        _otg.TargetPosition[1] := 0;
        _otg.TargetVelocity[0] := 0; 
        _otg.TargetVelocity[1] := 0;
        _otg.TargetAcceleration[0] := 0; 
        _otg.TargetAcceleration[1] := 0;        
      END_IF

      IF Halting
      THEN
        _step.SetNext(XyTableStep.AutomaticEnd);
      ELSIF NOT _segments.Empty
      THEN
        _segment REF= _segments.ItemAt(0);
        _step.SetNext(XyTableStep.AutomaticMoveToSegmentStart);
			END_IF


    (* -------------------------------------------------------------------------------------------------------------------------------- *)
    XyTableStep.AutomaticMoveToSegmentStart:
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
      IF _step.OnEntry()
      THEN
        _otg.TargetPosition[0] := _segment.Points[0].X;
        _otg.TargetPosition[1] := _segment.Points[0].Y;      
        _otg.TargetVelocity[0] := 0; 
        _otg.TargetVelocity[1] := 0;      
      ELSIF _otg.State = Struckig.TrajectoryState.Idle
      THEN
        _step.SetNext(XyTableStep.AutomaticMovePenDown);
      END_IF

    
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
    XyTableStep.AutomaticMovePenDown:
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
      IF _step.OnEntry()
      THEN
        _actuator.Pen.DownAsync(THIS^);
      END_IF

      Await(_actuator.Pen, XyTableStep.AutomaticDraw);

    (* -------------------------------------------------------------------------------------------------------------------------------- *)
    XyTableStep.AutomaticDraw:
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
      
      CASE _segment.Verb
      OF
        SegmentType.LinePoints: _step.SetNext(XyTableStep.AutomaticDrawLine);
        SegmentType.CatmulRomPoints: _step.SetNext(XyTableStep.AutomaticDrawCatmulRomDrawSplineBegin);
      ELSE
        Abort('Unsupported Verb');     
      END_CASE
      
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
    XyTableStep.AutomaticMovePenUp:
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
      IF _step.OnEntry()
      THEN
      
        _segments.PopFirstItem();
        
        IF _segments.Empty
          OR_ELSE NOT ZCore.IsEqualLreal(_otg.CurrentPosition[0], _segments.ItemAt(0).Points[0].X, 1E-2) 
          OR_ELSE NOT ZCore.IsEqualLreal(_otg.CurrentPosition[1], _segments.ItemAt(0).Points[0].Y, 1E-2)
        THEN
          _actuator.Pen.UpAsync(THIS^);
        END_IF 
      END_IF

      Await(_actuator.Pen, XyTableStep.AutomaticWaitSegment);
      
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
    XyTableStep.AutomaticDrawLine:
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
      IF _step.OnEntry()
      THEN
        _otg.CurrentAcceleration[0] := 0;
        _otg.CurrentAcceleration[1] := 0;
        _otg.CurrentVelocity[0] := 0;
        _otg.CurrentVelocity[1] := 0;        
        _otg.CurrentPosition[0] := _segment.Points[0].X;
        _otg.CurrentPosition[1] := _segment.Points[0].Y;
        _otg.TargetPosition[0] := _segment.Points[1].X;
        _otg.TargetPosition[1] := _segment.Points[1].Y;        
        _otg.TargetAcceleration[0] := 0;
        _otg.TargetAcceleration[1] := 0;
        _otg.TargetVelocity[0] := 0;
        _otg.TargetVelocity[1] := 0;
      ELSIF _otg.State = Struckig.TrajectoryState.Idle
      THEN
        _step.SetNext(XyTableStep.AutomaticMovePenUp);        
			END_IF

    (* -------------------------------------------------------------------------------------------------------------------------------- *)
    XyTableStep.AutomaticDrawCatmulRomDrawSplineBegin:
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
    
      _otg.CycleTime := _rt.CycleTimeInSeconds();
      _otg.ControlInterface := Struckig.ControlInterfaceType.Position;
      _otg.Discretization := Struckig.DiscretizationType.Discrete;
      _otg.EnableAutoPropagate := TRUE;
      _otg.Synchronization := Struckig.SynchronizationType.Phase;    
      _otg.CurrentAcceleration[0] := 0;
      _otg.CurrentAcceleration[1] := 0;        
      _otg.CurrentVelocity[0] := 0;
      _otg.CurrentVelocity[1] := 0;        
      _otg.CurrentPosition[0] := _segment.Points[0].X;
      _otg.CurrentPosition[1] := _segment.Points[0].Y;
      _otg.TargetAcceleration[0] := 0;
      _otg.TargetAcceleration[1] := 0;  
      _spline.Clear();
      
      // Add spline segment, we don't actually use CatmullRomSpline for interpolation,
      // but we use it to calculate the velocity at each point. The velocity for each
      // point is stored in _splineTangentBuffer
      FOR i:=0 TO 4
      DO 
        _spline.Append(DINT_TO_LREAL(_spline.Size()), ADR(_segment.Points[i]));
      END_FOR
      
      // Concat continuous segments, which are also splines. We could also concat
      // line segments, but it's not really needed and we get sharper edges by not 
      // doing so
      WHILE _segments.Size > 0 AND_THEN
        _segments.ItemAt(1).Verb = SegmentType.CatmulRomPoints AND_THEN
        IsEqualVector4(_segment.Points[4], _segments.ItemAt(1).Points[0], 1E-6)
      DO
        _segments.PopFirstItem();
        _segment REF= _segments.ItemAt(0); 
      
        FOR i:=1 TO 4
        DO 
          _spline.Append(DINT_TO_LREAL(_spline.Size()), ADR(_segment.Points[i]));
        END_FOR
      END_WHILE
      
      // Calculate the velocity for each point of the catmull rom spline. We
      // could also use the spline for interpolation, but we want control over 
      // jerk and acceleration limits and so rather use struckig.
      _spline.Recalculate();
      _splineIndex := 0;
      _step.SetNext(XyTableStep.AutomaticDrawCatmulRomDrawSpline);
      

    (* -------------------------------------------------------------------------------------------------------------------------------- *)
    XyTableStep.AutomaticDrawCatmulRomDrawSpline:
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
      IF _step.OnEntry()
      THEN
        _otg.TargetPosition[0] := _splinePointBuffer[_splineIndex*2];
        _otg.TargetPosition[1] := _splinePointBuffer[_splineIndex*2+1];      
        _otg.TargetVelocity[0] := _splineTangentBuffer[_splineIndex*2]; 
        _otg.TargetVelocity[1] := _splineTangentBuffer[_splineIndex*2+1]; 
      ELSIF _otg.State = Struckig.TrajectoryState.Idle
      THEN
        _splineIndex := _splineIndex + 1;      
        IF _splineIndex < _spline.Size()
        THEN
          _step.RepeatStep();
        ELSE
          _step.SetNext(XyTableStep.AutomaticMovePenUp);                  
				END_IF
			END_IF      
    
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
    XyTableStep.AutomaticEnd:
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
      SetBusy(FALSE);
  
  ELSE
    Abort('sequence contains unhandled step');
  END_CASE
UNTIL _step.IsNotRepeatable() OR_ELSE NOT Busy END_REPEAT

IF _step.Index >= XyTableStep.AutomaticWaitSegment
THEN
  _otg();
  
  IF _otg.State = Struckig.TrajectoryState.Error
  THEN
    Abort(_otg.ErrorMessage());
  ELSE
    _axis.AxisX.SetInterpolatedPosition(THIS^, _otg.CurrentPosition[0]);
    _axis.AxisY.SetInterpolatedPosition(THIS^, _otg.CurrentPosition[1]);
    _axis.AxisX.SetInterpolatedVelocity(THIS^, _otg.CurrentVelocity[0]);
    _axis.AxisY.SetInterpolatedVelocity(THIS^, _otg.CurrentVelocity[1]);    
	END_IF

END_IF]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>